import asyncio
import httpx

from src.auth.service import KeycloakClient
from src.bpmn.polling.connections import broadcast_message

from src.bpmn.polling.schemas import (
    ProcessDefinitionItemSchema,
    ProcessDefinitionSearchFilterSchema,
    ProcessInstanceSearchFilterSchema,
    ProcessInstanceSearchResponseSchema,
)
from src.config import config, logger

# TODO –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
username = config.get("KEYCLOAK_USERNAME")
password = config.get("KEYCLOAK_PASSWORD")

OPERATE_TOKEN = None

# TODO –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
async def set_access_token_by_keycloak(username: str, password: str) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ Keycloak."""
    global OPERATE_TOKEN
    keycloak_client = KeycloakClient()
    token_data = await keycloak_client.get_token_by_password(username, password)
    OPERATE_TOKEN = token_data.get("access_token", None)


async def process_definitions_search(
    filter_body: ProcessDefinitionSearchFilterSchema, token: str
) -> ProcessDefinitionItemSchema:
    """Search for process definitions using the provided filter."""
    if not OPERATE_TOKEN:
        await set_access_token_by_keycloak(username, password)
    async with httpx.AsyncClient() as client:
        response = await client.post(
            f"{config.get('CAMUNDA_OPERATE_BASE_URL')}/v1/process-definitions/search",
            json=filter_body.dict(exclude_none=True),
            headers={
                "Content-Type": "application/json",
                "Authorization": f"Bearer {OPERATE_TOKEN}",
            },
        )
        response.raise_for_status()
        return ProcessDefinitionItemSchema(**response.json())


async def process_instances_search(
    filter_body: ProcessInstanceSearchFilterSchema, token: str
) -> ProcessInstanceSearchResponseSchema:
    if not OPERATE_TOKEN:
        await set_access_token_by_keycloak(username, password)
    async with httpx.AsyncClient() as client:
        response = await client.post(
            f"{config.get('CAMUNDA_OPERATE_BASE_URL')}/v1/process-instances/search",
            json=filter_body.dict(exclude_none=True),
            headers={
                "Content-Type": "application/json",
                "Authorization": f"Bearer {OPERATE_TOKEN}",
            },
        )
        response.raise_for_status()
        return ProcessInstanceSearchResponseSchema(**response.json())


async def poll_process_definitions() -> None:
    """–§–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä: –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç Camunda Operate –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥."""
    logger.info("üîÅ –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ process_definitions")

    while True:
        try:
            # üëâ —Ñ–∏–ª—å—Ç—Ä –ø–æ bpmnProcessId
            search_filter = ProcessDefinitionSearchFilterSchema(
                filter={"bpmnProcessId": "Process_main", "state": "ACTIVE"}, size=10
            )
            # üëâ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            token = config.get("OPERATE_TOKEN", "")

            # üëâ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Operate
            result = await process_definitions_search(search_filter, token)

            await broadcast_message(
                {
                    "type": "process_definitions",
                    "data": result.dict(exclude_none=True),
                }
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

        await asyncio.sleep(5)


async def poll_process_instances() -> None:
    """–§–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä: –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç Camunda Operate –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥."""
    logger.info("üîÅ –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ process_instances")

    while True:
        try:
            # üëâ —Ñ–∏–ª—å—Ç—Ä –ø–æ bpmnProcessId
            search_filter = ProcessInstanceSearchFilterSchema(
                filter={"bpmnProcessId": "Process_main", "state": "ACTIVE"}, size=10
            )
            # üëâ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            token = config.get("OPERATE_TOKEN", "")

            # üëâ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Operate
            result = await process_instances_search(search_filter, token)

            await broadcast_message(
                {
                    "type": "process_instances",
                    "data": result.dict(exclude_none=True),
                }
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

        await asyncio.sleep(5)
